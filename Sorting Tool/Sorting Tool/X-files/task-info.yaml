type: edu
files:
- name: src/sorting/Main.kt
  visible: true
  text: |-
    package sorting

    import java.io.File

    var INPUT = ""
    var OUTPUT = ""

    fun main(args: Array<String>) {
        val sortCount = args.contains("-sortingType") && args.contains("byCount")
        if (commandsOkay(args)) {
            val lines = if (INPUT == "") generateSequence(::readLine).toList() else File(INPUT).readLines()

            when {
                args.contains("long") -> numbers(lines, sortCount)
                args.contains("line") -> lines(lines, sortCount)
                else -> words(lines, sortCount)
            }
        }
    }

    fun commandsOkay(args: Array<String>): Boolean {
        val sortType = listOf("byCount", "natural")
        val dataType = listOf("long", "line", "word")

        for (i in args.indices) {
            val last = i == args.lastIndex

            when (args[i]) {
                "-sortingType" -> if (last || !sortType.contains(args[i + 1])) {
                    println("No sorting type defined!")
                    return false
                }
                "-dataType" -> if (last || !dataType.contains(args[i + 1])) {
                    println("No sorting type defined!")
                    return false
                }
                "-inputFile" -> if (last || !File(args[i + 1]).isFile) {
                    println("${args[i + 1]} is not a file.")
                    return false
                } else INPUT = args[i + 1]
                "-outputFile" -> if (last) {
                    println("A filename was not given.")
                    return false
                } else try {
                    File(args[i + 1]).writeText("")
                    OUTPUT = args[i + 1]
                } catch (e: Exception) {
                    println(
                        "There was an error in writing to your file. Please ensure it is not set to read only or open" +
                                "in another program."
                    )
                    return false
                }
                else -> if (!(sortType + dataType).contains(args[i]) && args[i] != INPUT && args[i] != OUTPUT)
                    println("\"${args[i]}\" is not a valid parameter. It will be skipped.")
            }
        }
        return true
    }

    fun numbers(lines: List<String>, sortCount: Boolean) {
        val numbers = mutableListOf<Long>()
        val error = { it: String -> println("\"$it\" is not a long. It will be skipped."); null }

        for (line in lines) filterLine(line).map { it.toLongOrNull() ?: error(it) }
            .forEach { if (it != null) numbers.add(it) }
        output("Total numbers: ${numbers.size}.\n")
        if (sortCount) {
            val percent = { count: Int -> count * 100 / numbers.size }
            val mapCount = mutableMapOf<Int, MutableList<Long>>()
            for (number in numbers) {
                val count = numbers.count { it == number }
                if (mapCount.containsKey(count) && !mapCount[count]?.contains(number)!!) mapCount[count]?.add(number) else {
                    mapCount[count] = mutableListOf(number)
                }
            }
            val counts = mapCount.keys.toList().sorted()
            for (count in counts) {
                val numbs = mapCount[count]?.sorted() ?: break
                for (numb in numbs) output("$numb: $count time(s), ${percent(count)}%\n")
            }
        } else {
            numbers.sort()
            printSort()
            printList(numbers)
        }
    }

    fun lines(lines: List<String>, sortCount: Boolean) {
        output("Total lines: ${lines.size}.\n")
        if (sortCount) {
            printStringsCount(lines)
        } else {
            val hold = lines.sorted()
            printSort("\n")
            printList(hold, true)
        }
    }

    fun words(lines: List<String>, sortCount: Boolean) {
        val words = mutableListOf<String>()

        for (line in lines) filterLine(line).map { it }.forEach { words.add(it) }
        output("Total words: ${words.size}.\n")
        if (sortCount) {
            printStringsCount(words)
        } else {
            words.sort()
            printSort()
            printList(words)
        }
    }

    fun filterLine(line: String) = line.replace("\\s+".toRegex(), " ").split(" ")

    fun printSort(add: String = "") = output("Sorted data: $add")

    fun printList(list: List<Any>, line: Boolean = false) {
        for (i in list.indices) output("${list[i]}" + if (i != list.lastIndex) if (line) "\n" else " " else "")
        output("\n")
    }

    fun printStringsCount(strings: List<String>) {
        val percent = { count: Int -> count * 100 / strings.size }
        val mapCount = mutableMapOf<Int, MutableList<String>>()

        for (string in strings) {
            val count = strings.count { it == string }
            if (mapCount.containsKey(count) && !mapCount[count]?.contains(string)!!) mapCount[count]?.add(string) else {
                mapCount[count] = mutableListOf(string)
            }
        }
        val counts = mapCount.keys.toList().sorted()
        for (count in counts) {
            val strings2 = mapCount[count]?.sorted() ?: break
            for (string in strings2) output("$string: $count time(s), ${percent(count)}%\n")
        }
    }

    fun output(string: String) = if (OUTPUT == "") print(string) else File(OUTPUT).appendText(string)
  learner_created: false
- name: test/common/SortingToolStage6Test.kt
  visible: false
  text: |+
    package common

    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testcase.TestCase
    import java.io.File
    import java.io.FileNotFoundException
    import java.util.*

    class SortingToolStage6Test : SortingTest<SortingToolClue>() {

        override fun generate(): List<TestCase<SortingToolClue>> {
            return stage4Tests() + stage5Tests() + stage6Tests()
        }

        override fun check(reply: String, clue: SortingToolClue): CheckResult {
            @Suppress("NAME_SHADOWING") var reply = reply

            val fileNameArgIdx = clue.args.indexOf("-outputFile")

            if (fileNameArgIdx != -1) {
                val fileName = clue.args[fileNameArgIdx + 1]

                try {
                    reply = File(fileName).readText()
                } catch (ex: FileNotFoundException) {
                    return CheckResult.wrong(
                        "There is no output file $fileName"
                    )
                }

            }

            return when {
                badArgs(clue.args) -> CheckResult(true)  // TODO: test something here
                "byCount" in clue.args -> checkByCount(reply, clue)
                else -> checkNatural(reply, clue)
            }
        }

        private fun checkByCount(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                "long" in clue.args -> checkByCount(parseLongTokens(clue.consoleInput), { it.toInt() }, clue, reply)
                "word" in clue.args -> checkByCount(parseWordTokens(clue.consoleInput), { it }, clue, reply)
                "line" in clue.args -> checkByCount(parseLineTokens(clue.consoleInput), { it }, clue, reply)

                else -> throw IllegalArgumentException("Bad test: no data type found")
            }
        }

        private fun checkNatural(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                "long" in clue.args -> checkNatural(parseLongTokens(clue.consoleInput), ::parseLongTokens, clue, reply)
                "word" in clue.args -> checkNatural(parseWordTokens(clue.consoleInput), ::parseWordTokens, clue, reply)
                "line" in clue.args -> checkNatural(parseLineTokens(clue.consoleInput), ::parseLineTokens, clue, reply)

                else -> throw IllegalArgumentException("Bad test: no data type found")
            }
        }

        private fun badArgs(args: List<String>): Boolean {
            val unknownArgs =
                    args.toSet() - setOf("-dataType", "-sortingType", "long", "word", "line", "natural", "byCount")

            if (unknownArgs.isNotEmpty()) {
                return true
            }

            if (args.last() == "-dataType" || args.last() == "-sortingType") {
                return true
            }

            return false
        }
    }

    private fun fileTestCase(
            input: String,
            revealTest: Boolean,
            file: String,
            vararg args: String = arrayOf("-dataType", "long")
    ): TestCase<SortingToolClue> {
        return TestCase<SortingToolClue>()
                .setAttach(SortingToolClue(input, revealTest, args.toList()))
                .addArguments(*args)
                .addFile(file, input)
    }

    fun stage4Tests(): List<TestCase<SortingToolClue>> {
        return listOf(
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-dataType", "long", "-sortingType", "natural"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-dataType", "long"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "long"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "word"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "line"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "line"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "word"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "long"
                )
        )
    }

    fun stage5Tests(): List<TestCase<SortingToolClue>> {
        return listOf(
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "long", "-abc"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "line", "-cde"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-dataType", "line", "-sortingType"
                )
        )
    }

    fun stage6Tests(): List<TestCase<SortingToolClue>> {
        return listOf(
                fileTestCase(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "input.txt",
                        "-sortingType", "byCount", "-inputFile", "input.txt"
                ),
                fileTestCase(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "data.dat",
                        "-sortingType", "byCount", "-inputFile", "data.dat", "-outputFile", "out.txt"
                ),
                fileTestCase(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        false,
                        "input.txt",
                        "-sortingType", "natural", "-inputFile", "input.txt"
                ),
                fileTestCase(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        false,
                        "data.dat",
                        "-sortingType", "natural", "-inputFile", "data.dat", "-outputFile", "out.txt"
                )
        )
    }


    fun revealRawTest(clue: SortingToolClue, reply: String): String {
        return with(clue) { "Args:\n${args.joinToString(" ")}\nInput:\n$consoleInput\nYour output:\n$reply\n\n" }
    }

    class SortingToolClue(val consoleInput: String, val revealTest: Boolean, val args: List<String>)

    fun createTest(
            consoleInput: String,
            revealTest: Boolean,
            vararg args: String = arrayOf("-dataType", "long")
    ): TestCase<SortingToolClue> {
        return TestCase<SortingToolClue>()
                .setAttach(SortingToolClue(consoleInput, revealTest, args.toList()))
                .setInput(consoleInput)
                .addArguments(*args)
    }

    fun parseLongTokens(input: String): List<Int> {
        val scanner = Scanner(input)

        val longTokens = mutableListOf<Int>()

        while (scanner.hasNextInt()) {
            longTokens.add(scanner.nextInt())
        }

        return longTokens
    }

    fun parseWordTokens(input: String): List<String> {
        val scanner = Scanner(input)

        val wordTokens = mutableListOf<String>()

        while (scanner.hasNext()) {
            wordTokens.add(scanner.next())
        }

        return wordTokens
    }


    fun parseLineTokens(input: String): List<String> {
        return input.lines()
    }


    fun <TokenType : Comparable<TokenType>> checkNatural(
            actualTokens: List<TokenType>,
            sortedTokensParser: (String) -> List<TokenType>,
            clue: SortingToolClue,
            reply_: String
    ): CheckResult {
        val reply = reply_.trim()
        val lines = reply.lines()

        if (lines.size != 2) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't parse your output: expected 2 lines.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't parse your output: expected 2 lines.")
            }
        }

        val totalRegex = """(\d+)""".toRegex()
        val totalMatchResult = totalRegex.find(lines[0])
        if (totalMatchResult == null) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't find number in the first line of your output.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't find number in the first line of your output.")
            }
        }

        val totalTokens = totalMatchResult.groupValues[1].toInt()

        val actualTotal = actualTokens.size

        if (actualTotal != totalTokens) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total tokens ($totalTokens) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total tokens are incorrect.")
            }
        }

        val sortedActualTokens = actualTokens.sorted()

        val sortedTokens = sortedTokensParser(lines[1].substringAfter(":").dropWhile { it in setOf('\n', '\r') })

        val total = sortedTokens.size

        if (actualTotal != total) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total sorted tokens ($total) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total sorted tokens are incorrect.")
            }
        }

        if (sortedActualTokens != sortedTokens) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Sorted tokens are incorrect.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Sorted tokens are incorrect.")
            }
        }

        return CheckResult(true)
    }


    fun <TokenType : Comparable<TokenType>> checkByCount(
            actualTokens: List<TokenType>,
            tokenParser: (String) -> TokenType,
            clue: SortingToolClue,
            reply_: String
    ): CheckResult {
        val reply = reply_.trim()
        val lines = reply.lines()

        val totalRegex = """(\d+)""".toRegex()
        val totalMatchResult = totalRegex.find(lines[0])
        if (totalMatchResult == null) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't find number in the first line of your output.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't find number in the first line of your output.")
            }
        }

        val totalTokens = totalMatchResult.groupValues[1].toInt()

        val actualTotal = actualTokens.size

        if (actualTotal != totalTokens) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total tokens ($totalTokens) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total tokens are incorrect.")
            }
        }

        val tokenToCount = mutableMapOf<TokenType, Int>()

        for (token in actualTokens) {
            tokenToCount[token] = (tokenToCount[token] ?: 0) + 1
        }

        val actualSortedByCount = tokenToCount.toList().sortedWith(compareBy({ it.second }, { it.first }))
        val linesWithTokens = lines.drop(1)

        if (actualSortedByCount.size != linesWithTokens.size) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Lines with tokens (${linesWithTokens.size}) are incorrect. Expected: ${actualSortedByCount.size}.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Lines with tokens are incorrect.")
            }
        }

        for ((lineId, line) in linesWithTokens.withIndex()) {
            val token = tokenParser(line.substringBefore(':'))
            val info = line.substringAfter(':')

            val (actualToken, actualTimes) = actualSortedByCount[lineId]

            if (token != actualToken) {
                return if (clue.revealTest) {
                    CheckResult(
                            false,
                            "Token ($token) is incorrect. Expected: $actualToken.\n" +
                                    revealRawTest(clue, reply)
                    )
                } else {
                    CheckResult(false, "Token is incorrect.")
                }
            }

            // TODO: check info (times and percentage)
        }

        return CheckResult(true)
    }


  learner_created: false
- name: test/common/SortingTest.java
  visible: false
  text: |
    package common;

    import org.hyperskill.hstest.stage.StageTest;
    import sorting.MainKt;

    public abstract class SortingTest<T> extends StageTest<T> {
        public SortingTest() {
            super(MainKt.class);
        }
    }
  learner_created: false
- name: out.txt
  visible: true
  learner_created: true
- name: test/common/SortingToolStage2Test.kt
  visible: true
  learner_created: true
- name: test/common/SortingToolStage5Test.kt
  visible: true
  learner_created: true
- name: test/common/SortingToolStage4Test.kt
  visible: true
  learner_created: true
- name: test/common/SortingToolStage3Test.kt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/106/stages/579/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Tue, 08 Dec 2020 08:44:19 UTC
record: 5
