type: edu
custom_name: stage5
files:
- name: src/seamcarving/Main.kt
  visible: true
  text: |
    package seamcarving

    fun main() {
        print("Hello, World!")
    }
  learner_created: false
- name: test/SeamCarvingTest.java
  visible: false
  text: |
    import org.apache.commons.codec.binary.Hex;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import seamcarving.MainKt;

    import javax.imageio.ImageIO;
    import java.awt.*;
    import java.awt.image.BufferedImage;
    import java.io.ByteArrayOutputStream;
    import java.io.File;
    import java.io.FileInputStream;
    import java.io.IOException;
    import java.security.MessageDigest;
    import java.security.NoSuchAlgorithmException;
    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;

    class CheckFailException extends Exception {
        public CheckFailException(String s) {
            super(s);
        }
    }

    class Image {
        private BufferedImage image;

        Image(String filename) throws IOException {
            image = ImageIO.read(new File(filename));
        }

        private int dx2(int x, int y) {
            if (x == 0) {
                return dx2(x + 1, y);
            }
            else if (x == image.getWidth() - 1) {
                return dx2(x - 1, y);
            }
            else {
                Color l = new Color(image.getRGB(x - 1, y));
                Color r = new Color(image.getRGB(x + 1, y));
                return (l.getRed() - r.getRed()) * (l.getRed() - r.getRed()) +
                    (l.getGreen() - r.getGreen()) * (l.getGreen() - r.getGreen()) +
                    (l.getBlue() - r.getBlue()) * (l.getBlue() - r.getBlue());
            }
        }

        private int dy2(int x, int y) {
            if (y == 0) {
                return dy2(x, y + 1);
            }
            else if (y == image.getHeight() - 1) {
                return dy2(x, y - 1);
            }
            else {
                Color t = new Color(image.getRGB(x, y - 1));
                Color b = new Color(image.getRGB(x, y + 1));
                return (t.getRed() - b.getRed()) * (t.getRed() - b.getRed()) +
                    (t.getGreen() - b.getGreen()) * (t.getGreen() - b.getGreen()) +
                    (t.getBlue() - b.getBlue()) * (t.getBlue() - b.getBlue());
            }
        }

        public double pixelEnergy(int x, int y) {
            return Math.sqrt((double)dx2(x, y) + (double)dy2(x, y));
        }

        public List<Integer> findHorizontalSeam() throws CheckFailException {
            ArrayList<Integer> result = new ArrayList<Integer>();
            for (int x = 0; x < image.getWidth(); x++) {
                boolean found = false;

                for (int y = 0; y < image.getHeight(); y++) {
                    Color c = new Color(image.getRGB(x, y));
                    if (c.equals(Color.RED)) {
                        result.add(y);
                        found = true;
                        break;
                    }
                }

                if (!found)
                    throw new CheckFailException(String.format("Could not find seam pixel in column (%d)", x));
            }
            return result;
        }
    }

    class OutFile {
        String hash;
        String inFileName;
        String outFilename;
        int width;
        int height;

        Double seamSum;

        OutFile(String inFileName, String outFilename, int width, int height, String hash, Double sum) {
            this.inFileName = inFileName;
            this.outFilename = outFilename;
            this.width = width;
            this.height = height;
            this.hash = hash;
            this.seamSum = sum;
        }

        public void checkSum() throws CheckFailException {
            try {
                double delta = 0.00001;

                Image input = new Image(inFileName);
                Image output = new Image(outFilename);

                double actualSum = 0;
                List<Integer> seam = output.findHorizontalSeam();
                for (int x = 0; x < seam.size(); x++) {
                    int y = seam.get(x);
                    actualSum += input.pixelEnergy(x, y);
                }

                if (actualSum < seamSum - delta || actualSum > seamSum + delta) {
                    throw new CheckFailException(
                        String.format(
                            "Total energy of your seam (%f) does not match expected value (%f +/- %f)",
                            actualSum, seamSum, delta));
                }

            } catch (IOException e) {
                throw new CheckFailException(
                    String.format(
                        "Could not read output file '%s'. Please check you produce output file",
                        outFilename));
            }
        }

        public boolean compareWithActualMD5() throws CheckFailException {
            try {
                File imgPath = new File(outFilename);
                BufferedImage sourceImage = ImageIO.read(imgPath);

                BufferedImage rgbImage =
                    new BufferedImage(sourceImage.getWidth(), sourceImage.getHeight(), BufferedImage.TYPE_INT_RGB);
                for (int i = 0; i < sourceImage.getWidth(); i++) {
                    for (int j = 0; j < sourceImage.getHeight(); j++) {
                        rgbImage.setRGB(i, j, sourceImage.getRGB(i, j));
                    }
                }

                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                ImageIO.write(rgbImage, "bmp", baos);

                MessageDigest md = MessageDigest.getInstance("MD5");
                md.update(baos.toByteArray());
                byte[] digest = md.digest();
                String actualHash = Hex.encodeHexString(digest);
                if (!actualHash.equalsIgnoreCase(hash)) {
                    throw new CheckFailException(
                        String.format(
                            "Hash sum of your image (%s) does not match expected value",
                            actualHash));
                }
            } catch (IOException e) {
                throw new CheckFailException(
                    String.format(
                        "Could not read output file '%s'. Please check you produce output file",
                        outFilename));
            } catch (NoSuchAlgorithmException e) {
                e.printStackTrace();
                throw new CheckFailException("Internal test error. please report to Hyperskill team");
            }

            return true;
        }

        public boolean compareActualDimensions() throws CheckFailException {
            try {
                BufferedImage image = ImageIO.read(new File(outFilename));

                if (image == null) {
                    throw new CheckFailException(
                        String.format(
                            "File format error. Looks like your output '%s' is not a valid image file.",
                            outFilename));
                }

                if (image.getWidth() != width) {
                    throw new CheckFailException(
                        String.format(
                            "Dimensions mismatch. Output image width: %d; expected width: %d",
                            image.getWidth(), width));
                }

                if (image.getHeight() != height) {
                    throw new CheckFailException(
                        String.format(
                            "Dimensions mismatch. Output image height: %d; expected height: %d",
                            image.getHeight(), height));
                }

            } catch (IOException e) {
                throw new CheckFailException(
                    String.format(
                        "Could not read output file '%s'. Please check you produce output file",
                        outFilename));
            }

            return true;
        }
    }

    public class SeamCarvingTest extends StageTest<OutFile> {

        public SeamCarvingTest() {
            super(MainKt.class);
        }

        @Override
        public List<TestCase<OutFile>> generate() {

            return Arrays.asList(
                new TestCase<OutFile>()
                    .addArguments("-in", "test/small.png", "-out", "test/small-seam-hor.png")
                    .setAttach(new OutFile("test/small.png", "test/small-seam-hor.png",
                        15, 10,
                        "91d48b32789908d7826a32e1304a4ddc", 1136.850201)),

                new TestCase<OutFile>()
                    .addArguments("-in", "test/blue.png", "-out", "test/blue-seam-hor.png")
                    .setAttach(new OutFile("test/blue.png", "test/blue-seam-hor.png",
                        500, 334,
                        "b9070275c8a22db340162d2419fa13fe", 327.257757)),

                new TestCase<OutFile>()
                    .addArguments("-in", "test/trees.png", "-out", "test/trees-seam-hor.png")
                    .setAttach(new OutFile("test/trees.png", "test/trees-seam-hor.png",
                        600, 429,
                        "69ed6abd2487d46df650cbe46d577dc7", 115.903883))
            );
        }

        @Override
        public CheckResult check(String reply, OutFile expectedFile) {
            try {
                expectedFile.compareActualDimensions();
                //expectedFile.compareWithActualMD5();
                expectedFile.checkSum();
            } catch (CheckFailException e) {
                return CheckResult.wrong(e.getMessage());
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: test/blue.png
  visible: false
  learner_created: false
- name: test/small.png
  visible: false
  learner_created: false
- name: test/trees.png
  visible: false
  learner_created: false
- name: test.kt
  visible: true
  text: |-
    package seamcarving

    ////object ByteArrayToImage {
    ////    @Throws(Exception::class)
    ////    @JvmStatic
    //    fun main(args: Array<String>) {
    //        val bImage = ImageIO.read(File("sample.png"))
    //        val bos = ByteArrayOutputStream()
    //        ImageIO.write(bImage, "png", bos)
    //        val data = bos.toByteArray()
    //        val bis = ByteArrayInputStream(data)
    //        val bImage2 = ImageIO.read(bis)
    //        ImageIO.write(bImage2, "png", File("out.png"))
    //        println("image created")
    //    }
    ////}
  learner_created: false
- name: Image.kt
  visible: true
  text: |-
    package seamcarving

    import java.awt.Color
    import java.awt.image.BufferedImage

    class Image {
        val height: Int
        val width: Int
        private val data: Array<Array<Color>>

        constructor(img: BufferedImage) {
            this.height = img.height
            this.width = img.width
            this.data = Array(height) { y -> Array(width) { x -> Color(img.getRGB(x, y)) } }
        }

        constructor(height: Int, width: Int) {
            this.height = height
            this.width = width
            this.data = Array(height) { Array(width) { Color.BLACK } }
        }

        constructor(source: Image) {
            this.height = source.height
            this.width = source.width
            this.data = Array(height) { y -> Array(width) { x -> source.getColor(x, y) } }
        }

        fun getColor(x: Int, y: Int) = data[y][x]

        fun setColor(x: Int, y: Int, c: Color) {
            data[y][x] = c
        }

        fun toBufferedImage() = BufferedImage(width, height, BufferedImage.TYPE_INT_RGB).apply {
            for (y in 0 until height) {
                for (x in 0 until width) {
                    setRGB(x, y, getColor(x, y).rgb)
                }
            }
        }

        fun transposed() = Image(width, height).also { res ->
            for (y in 0 until height) {
                for (x in 0 until width) {
                    res.setColor(y, x, getColor(x, y))
                }
            }
        }
    }
  learner_created: true
- name: SeamCarving.kt
  visible: true
  text: |-
    package seamcarving

    import java.awt.Color
    import java.awt.image.BufferedImage
    import kotlin.math.sqrt

    fun removeSeams(image: BufferedImage, count: Int): BufferedImage {
        var img = image

        var i = count
        while (i > 0 && img.width > 0) {
            img = removeSeam(img)
            i--
        }

        return img
    }

    private fun removeSeam(image: BufferedImage): BufferedImage {
        //the first value of pair indicates shortest path of vertical seam to the pixel
        //the second value indicates which pixel of the previous row we came from
        val path: Array<Array<Pair<Double, Int>>> = Array(image.width) { Array(image.height) { Pair(0.0, 0) } }

        calcShortestVerticalPaths(path, image)

        val seam = findSeam(path, image)

        for ((x, y) in seam) {
            shiftLeft(x, y, image)
        }

        return image.getSubimage(0, 0, image.width - 1, image.height)
    }

    private fun calcShortestVerticalPaths(path: Array<Array<Pair<Double, Int>>>, image: BufferedImage) {
        for (y in 0 until image.height) {
            for (x in 0 until image.width) {
                val energy = calcEnergy(x, y, image)
                if (y == 0) {
                    path[x][y] = Pair(energy, 0)
                } else {
                    val topLeft = if (x == 0) Double.MAX_VALUE else path[x - 1][y - 1].first
                    val top = path[x][y - 1].first
                    val topRight = if (x == image.width - 1) Double.MAX_VALUE else path[x + 1][y - 1].first

                    if (topLeft <= top && topLeft <= topRight) {
                        path[x][y] = Pair(topLeft + energy, -1)
                    } else if (top <= topRight && top <= topLeft) {
                        path[x][y] = Pair(top + energy, 0)
                    } else if (topRight <= topLeft && topRight <= top) {
                        path[x][y] = Pair(topRight + energy, 1)
                    }
                }
            }
        }
    }

    private fun findSeam(path: Array<Array<Pair<Double, Int>>>, image: BufferedImage): List<Pair<Int, Int>> {
        var bottomRowMin = Double.MAX_VALUE
        var coordOfBottomRowMin = -1
        val bottomRow = image.height - 1
        for (x in 0 until image.width) {
            if (path[x][bottomRow].first < bottomRowMin) {
                coordOfBottomRowMin = x
                bottomRowMin = path[x][bottomRow].first
            }
        }

        val seam = mutableListOf<Pair<Int, Int>>()
        var x = coordOfBottomRowMin
        var y = bottomRow
        while (y != -1) {
            seam.add(Pair(x, y))
            x += path[x][y].second
            y--
        }

        return seam
    }

    private fun correctCoord(x: Int, max: Int): Int {
        return when (x) {
            -1 -> 0
            max - 1 -> x - 1
            else -> x
        }
    }

    private fun calcEnergy(x: Int, y: Int, image: BufferedImage): Double {
        val leftX = correctCoord(x - 1, image.width - 1)
        val topY = correctCoord(y - 1, image.height - 1)

        val leftColor = Color(image.getRGB(leftX, y))
        val rightColor = Color(image.getRGB(leftX + 2, y))
        val topColor = Color(image.getRGB(x, topY))
        val downColor = Color(image.getRGB(x, topY + 2))

        val xDiff = intArrayOf(leftColor.red - rightColor.red, leftColor.green - rightColor.green, leftColor.blue - rightColor.blue)
        val yDiff = intArrayOf(topColor.red - downColor.red, topColor.green - downColor.green, topColor.blue - downColor.blue)

        var xGradient = 0
        var yGradient = 0
        for (i in 0..2) {
            xGradient += xDiff[i] * xDiff[i]
            yGradient += yDiff[i] * yDiff[i]
        }

        return sqrt((xGradient + yGradient).toDouble())
    }

    private fun shiftLeft(x: Int, y: Int, image: BufferedImage) {
        var i = x
        while (i < image.width - 1) {
            image.setRGB(i, y, image.getRGB(i + 1, y))
            i++
        }
    }
  learner_created: true
- name: ImageRotation.kt
  visible: true
  text: |-
    package seamcarving

    import java.awt.geom.AffineTransform
    import java.awt.image.AffineTransformOp
    import java.awt.image.BufferedImage
    import java.io.File
    import javax.imageio.ImageIO

    fun rotate90(image: BufferedImage, clockwise: Boolean): BufferedImage {
        var angle = Math.PI / 2
        if (clockwise) {
            angle = -angle
        }

        val rotatedWidth = image.height
        val rotatedHeight = image.width
        val rotatedImage = BufferedImage(rotatedWidth, rotatedHeight, image.type)

        val at = AffineTransform()
        at.translate(rotatedWidth.toDouble() / 2, rotatedHeight.toDouble() / 2)
        at.rotate(angle, 0.0, 0.0)
        at.translate(-image.width.toDouble() / 2, -image.height.toDouble() / 2)

        val rotateOp = AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR)
        rotateOp.filter(image, rotatedImage)

        return rotatedImage
    }
  learner_created: true
- name: Arguments.kt
  visible: true
  text: |-
    package seamcarving

    data class Arguments(var inputFileName: String = "sample.png", var outputFileName: String = "out.png",
                         var width: Int = 0, var height: Int = 0)
  learner_created: true
- name: src/seamcarving/ImageExperiments.kt
  visible: true
  text: |
    package seamcarving

    import java.awt.Color
    import java.awt.RenderingHints
    import java.awt.image.BufferedImage
    import java.io.File
    import javax.imageio.ImageIO

    fun merge(backImage: String, frontImage: String, frontVisible: Int): BufferedImage {
        val backGround = ImageIO.read(File(backImage))
        val front = imageTransparency(frontImage, frontVisible)
        val g = backGround.createGraphics()

        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON)
        g.drawImage(front, 0, 0, null)
        g.dispose()
        return backGround
    }

    fun alterImageColor(inputImage: String, subtractColor: Int): BufferedImage {
        val bImage = ImageIO.read(File(inputImage))
        if (subtractColor <= 0) return bImage

        for (i in 0 until bImage.width) {
            for (j in 0 until bImage.height) {
                var color = Color(bImage.getRGB(i, j))
                val red = if (color.red > subtractColor) color.red - subtractColor else subtractColor - color.red
                val green = if (color.green > subtractColor) color.green - subtractColor else subtractColor - color.green
                val blue = if (color.blue > subtractColor) color.blue - subtractColor else subtractColor - color.blue

                color = Color(red, green, blue)
                bImage.setRGB(i, j, color.rgb)
            }
        }
        return bImage
    }

    fun imageTransparency(imageFile: String, transparency: Int): BufferedImage {
        val original = ImageIO.read(File(imageFile))
        val copy = BufferedImage(original.width, original.height, BufferedImage.TYPE_INT_ARGB)

        for (i in 0 until copy.width) {
            for (j in 0 until copy.height) {
                var color = Color(original.getRGB(i, j), true)

                color = Color(color.red, color.green, color.blue, transparency)
                copy.setRGB(i, j, color.rgb)
            }
        }
        return copy
    }

    fun checkTransparency(imageFile: String, x: Int, y: Int) {
        val checkImage = ImageIO.read(File(imageFile))
        val color = Color(checkImage.getRGB(x, y), true)
        println(color.alpha)
    }
  learner_created: true
- name: test/blue-seam-hor.png
  visible: true
  learner_created: true
- name: test/trees-seam-hor.png
  visible: true
  learner_created: true
- name: test/small-seam-hor.png
  visible: true
  learner_created: true
- name: src/seamcarving/sky-horizontal-seam.png
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/100/stages/554/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/100/stages/554/implement">JetBrains
    Academy</a>
  time: Thu, 03 Dec 2020 09:10:08 UTC
record: 5
