type: edu
custom_name: stage7
files:
- name: src/calculator/Main.kt
  visible: true
  text: |
    package calculator

    fun main() {
        println("Hello, World!")
    }
  learner_created: false
- name: test/Test.java
  visible: false
  text: |
    import calculator.MainKt;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.Arrays;
    import java.util.List;

    public class Test extends StageTest<String> {
        @Override
        public List<TestCase<String>> generate() {
            return Arrays.asList(
                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram(MainKt.class);

                    // tests of functionality of previous steps
                    main.start();

                    // test of /help
                    String output = main.execute("/help").trim();
                    if (output.length() < 4) {
                        return CheckResult.wrong(
                            "It seems like there was no any \"help\" message.");
                    }

                    // input empty string
                    output = main.execute("");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Incorrect response to an empty string. " +
                            "The program should not print anything.");
                    }

                    // testing basic assignment
                    output = main.execute("n = -32");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Unexpected reaction after assignment." +
                            "The program should not print anything in this case.");
                    }

                    // testing a big amount of numbers
                    output = main.execute("33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4").trim();
                    if (!output.equals("-3")) {
                        return CheckResult.wrong(
                            "The program cannot process addition and " +
                                "subtraction operations correctly.");
                    }

                    // the same with a variable
                    output = main.execute("33 + 20 + 11 + 49 + n - 9 + 1 - 80 + 4").trim();
                    if (!output.equals("-3")) {
                        return CheckResult.wrong(
                            "The program cannot process addition and " +
                                "subtraction operations correctly.");
                    }


                    output = main.execute("c = n \nc = -2");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Unexpected reaction after assignment." +
                            "The program should not print anything in this case.");
                    }

                    // check value
                    output = main.execute("  c   ").trim();
                    if (!output.equals("-2")) {
                        return CheckResult.wrong(
                            "The variable stores not a correct value." +
                            "May be the program could not assign the value " +
                                "of one variable to another one.");
                    }

                    // the sum of the numbers is zero
                    output = main.execute("11 - 9 + c").trim();
                    if (!output.equals("0")) {
                        return CheckResult.wrong(
                            "The problem when sum is equal to 0 has occurred.");
                    }

                    // test of multiple operations
                    output = main.execute("5 --- 2 ++++++ 4 -- 2 ---- 1").trim();
                    if (!output.equals("10")) {
                        return CheckResult.wrong(
                            "The program cannot process multiple operations " +
                                "with several operators.");
                    }

                    // test of a nonexistent command
                    output = main.execute("/start").trim().toLowerCase();
                    if (!output.startsWith("unknown")) {
                        return CheckResult.wrong(
                            "The program should print \"Unknown command\" " +
                            "when a nonexistent command is entered.");
                    }

                    // testing invalid variable name
                    output = main.execute("var1 = 1").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The name of variable should contain only Latin letters.");
                    }

                    // testing invalid value
                    output = main.execute("var = 2a").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The value can be an integer number or a value of another variable");
                    }

                    // testing multiple equalization
                    output = main.execute("c = 7 - 1 = 5").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The program could not handle a invalid assignment.");
                    }

                    // testing assignment by unassigned variable
                    output = main.execute("variable = f").trim().toLowerCase();
                    if (!(output.startsWith("unknown") || output.startsWith("invalid"))) {
                        return CheckResult.wrong(
                            "The program should not allow an assignment by unassigned variable.");
                    }

                    // checking case sensitivity
                    main.execute("variable = 777");
                    output = main.execute("Variable").trim().toLowerCase();
                    if (!output.startsWith("unknown") && !output.startsWith("invalid")) {
                        return CheckResult.wrong("The program should be case sensitive.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram(MainKt.class);

                    // A test suit for multiplication and division
                    main.start();

                    String output = main.execute("4 * 3").trim();
                    if (!output.equals("12")) {
                        return CheckResult.wrong(
                            "The program has problems with multiplication operation.");
                    }

                    output = main.execute("91 / 13").trim();
                    if (!output.equals("7")) {
                        return CheckResult.wrong(
                            "The program has problems with division operation.");
                    }

                    // testing all operators
                    main.execute(" a= 7 \n b =2");
                    output = main.execute("a * 4 / b - (3 - 1)").trim();
                    if (!output.equals("12")) {
                        return CheckResult.wrong(
                            "The program cannot correctly process several operations.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram(MainKt.class);

                    // testing priority of parentheses
                    main.start();

                    // expression from the example
                    String output = main.execute(
                        "7 + 3 * ((4 + 3) * 7 + 1) - 6 / (2 + 1)").trim();

                    if (!output.equals("155")) {
                        return CheckResult.wrong(
                            "The program cannot reproduce an example from the task.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),
                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram(MainKt.class);

                    // a set of negative tests
                    main.start();

                    // tests with unclosed brackets
                    String output = main.execute("8 * (2 + 3").trim().toLowerCase();
                    String output1 = main.execute("4 + 5)").trim().toLowerCase();
                    if (!output.startsWith("invalid") || !output1.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The program could not handle an invalid expression.");
                    }

                    // sequence of * test
                    output = main.execute("2 ************ 2").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "A sequence of \"*\" should return \"Invalid expression\".");
                    }

                    // sequence of / test
                    output = main.execute("2 // 2").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "A sequence of \"/\" should return \"Invalid expression\".");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                })
            );
        }
    }
  learner_created: false
- name: src/calculator/Postfix.kt
  visible: true
  text: |-
    package calculator

    import java.util.*

    private val STACK = Stack<String>()
    private val POSTFIX = mutableListOf<String>()
    private val ERROR = Error()
    private var HOLD = ""
    private var INDEX = 0
    private var LAST = 0
    private var INFIX = ""
    private const val SOME_OP = "*/^"
    private const val ALL_OP = "+-$SOME_OP"
    private const val OP_PLUS = "()$ALL_OP"

    fun postfixFrom(infix: String): Array<String> {
        reset()
        INFIX = infix.trim()
        while (INFIX.contains("  ")) INFIX = INFIX.replace("  ", " ")
        LAST = INFIX.lastIndex
        var shouldBeOperator = false

        while (!ERROR.triggered() && INDEX <= LAST) {
            if (INFIX[INDEX] == ' ') INDEX++
            if (shouldBeOperator) {
                val op = chkMultiOp()
                if (!ERROR.triggered()) operator(op.toString())
                shouldBeOperator = false
            } else {
                for (i in 1..4) {
                    if (ERROR.triggered() || INDEX > LAST) break
                    val char = INFIX[INDEX]
                    when (i) {
                        1 -> if (char == '(') leftParen()
                        2 -> if ("+-".contains(char)) chkMinus()
                        3 -> if (OP_PLUS.contains(char)) ERROR.invalidExp() else addNumber()
                        4 -> if (char == ')') rightParen()
                    }
                }
                shouldBeOperator = true
            }
        }
        if (!ERROR.triggered()) emptyStack()
        if (ERROR.triggered()) POSTFIX.clear()
        return POSTFIX.toTypedArray()
    }

    private fun reset() {
        if (STACK.isNotEmpty()) STACK.clear()
        if (POSTFIX.isNotEmpty()) POSTFIX.clear()
        if (ERROR.triggered()) ERROR.reset()
        if (HOLD != "") HOLD = ""
        if (INDEX != 0) INDEX = 0
    }

    private fun chkMultiOp(): Char {
        var count = 0
        var op = INFIX[INDEX]

        while (ALL_OP.contains(INFIX[INDEX])) {
            INDEX++
            count++
            if (chkIndexERROR()) return ' '
            if (ALL_OP.contains(INFIX[INDEX])) {
                if (INFIX[INDEX] != op || SOME_OP.contains(INFIX[INDEX])) {
                    ERROR.invalidExp()
                    return ' '
                }
            }
        }
        if (op == '-' && count % 2 == 0) op = '+'
        return op
    }

    private fun operator(op: String) {
        when (op) {
            "+", "-", "*", "/", "^" -> {
                if (STACK.isEmpty() || STACK.peek() == "(" || opIsGreater(op[0])) STACK.push(op) else {
                    while (STACK.isNotEmpty()) if (STACK.peek() != "(") POSTFIX.add(STACK.pop()) else break
                    STACK.push(op)
                }
            }
            else                    -> ERROR.invalidExp()
        }
    }

    private fun leftParen() {
        while (INFIX[INDEX] == '(') {
            STACK.push(INFIX[INDEX].toString())
            INDEX++
            if (chkIndexERROR()) return
        }
    }

    private fun chkMinus() {
        when (INFIX[INDEX]) {
            '+', '-' -> {
                if (INFIX[INDEX] == '-') HOLD += '-'
                INDEX++
                chkIndexERROR()
            }
        }
    }

    private fun addNumber() {
        while (INDEX <= LAST) {
            if (!OP_PLUS.contains(INFIX[INDEX]) && INFIX[INDEX] != ' ') {
                HOLD += INFIX[INDEX]
                INDEX++
            } else break
        }
        if (HOLD != "") {
            POSTFIX.add(HOLD)
            HOLD = ""
        }
    }

    private fun rightParen() {
        while (INFIX[INDEX] == ')') {
            var stop = false
            while (!stop && STACK.isNotEmpty()) {
                POSTFIX.add(STACK.pop())
                if (STACK.isNotEmpty()) if (STACK.peek() == "(") stop = true
            }
            if (STACK.isEmpty() && !stop) {
                ERROR.invalidExp()
                return
            } else STACK.pop()
            INDEX++
            if (INDEX > LAST) break
        }
    }

    private fun opIsGreater(char: Char): Boolean {
        when (char) {
            '+', '-' -> return false
            '*', '/' -> return when (STACK.peek()) {
                "+", "-" -> true
                else     -> false
            }
            '^'      -> return when (STACK.peek()) {
                "^"  -> false
                else -> true
            }
        }
        return false
    }

    private fun emptyStack() {
        while (STACK.isNotEmpty()) {
            val temp = STACK.pop()
            if (temp == "(" || temp == ")") {
                ERROR.invalidExp()
                return
            }
            POSTFIX.add(temp)
        }
    }

    private fun chkIndexERROR(): Boolean {
        return if (INDEX > LAST) {
            ERROR.invalidExp()
            true
        } else false
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/88/stages/492/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Fri, 11 Dec 2020 09:24:28 UTC
record: 7
